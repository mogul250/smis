#!/usr/bin/env node

/**
 * SMIS API Test Report Generator
 * Generates a detailed test report from Playwright test results
 */

const fs = require('fs');
const path = require('path');

const RESULTS_FILE = path.join(__dirname, '../test-results/results.json');
const REPORT_FILE = path.join(__dirname, '../test-results/api-test-report.md');

function generateReport() {
  console.log('📊 Generating SMIS API Test Report...');
  
  if (!fs.existsSync(RESULTS_FILE)) {
    console.error('❌ Test results file not found. Please run tests first.');
    process.exit(1);
  }
  
  const results = JSON.parse(fs.readFileSync(RESULTS_FILE, 'utf8'));
  
  const report = generateMarkdownReport(results);
  
  // Ensure output directory exists
  const outputDir = path.dirname(REPORT_FILE);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  fs.writeFileSync(REPORT_FILE, report);
  
  console.log(`✅ Test report generated: ${REPORT_FILE}`);
  console.log(`📈 Summary: ${results.stats.passed} passed, ${results.stats.failed} failed, ${results.stats.skipped} skipped`);
}

function generateMarkdownReport(results) {
  const timestamp = new Date().toISOString();
  const duration = Math.round(results.stats.duration / 1000);
  
  let report = `# SMIS API Test Report

**Generated:** ${timestamp}  
**Duration:** ${duration}s  
**Total Tests:** ${results.stats.total}  
**Passed:** ${results.stats.passed} ✅  
**Failed:** ${results.stats.failed} ❌  
**Skipped:** ${results.stats.skipped} ⏭️  

## Summary

| Metric | Count | Percentage |
|--------|-------|------------|
| Passed | ${results.stats.passed} | ${((results.stats.passed / results.stats.total) * 100).toFixed(1)}% |
| Failed | ${results.stats.failed} | ${((results.stats.failed / results.stats.total) * 100).toFixed(1)}% |
| Skipped | ${results.stats.skipped} | ${((results.stats.skipped / results.stats.total) * 100).toFixed(1)}% |

`;

  // Group tests by suite
  const suites = {};
  results.suites.forEach(suite => {
    const suiteName = suite.title;
    if (!suites[suiteName]) {
      suites[suiteName] = {
        tests: [],
        passed: 0,
        failed: 0,
        skipped: 0
      };
    }
    
    suite.specs.forEach(spec => {
      spec.tests.forEach(test => {
        suites[suiteName].tests.push(test);
        if (test.status === 'passed') suites[suiteName].passed++;
        else if (test.status === 'failed') suites[suiteName].failed++;
        else if (test.status === 'skipped') suites[suiteName].skipped++;
      });
    });
  });

  // Generate suite reports
  Object.entries(suites).forEach(([suiteName, suite]) => {
    const icon = getIconForSuite(suiteName);
    report += `## ${icon} ${suiteName}

**Tests:** ${suite.tests.length} | **Passed:** ${suite.passed} | **Failed:** ${suite.failed} | **Skipped:** ${suite.skipped}

`;

    if (suite.failed > 0) {
      report += `### ❌ Failed Tests\n\n`;
      suite.tests.filter(test => test.status === 'failed').forEach(test => {
        report += `- **${test.title}**\n`;
        if (test.error) {
          report += `  \`\`\`\n  ${test.error.message}\n  \`\`\`\n`;
        }
        report += `\n`;
      });
    }

    if (suite.passed > 0) {
      report += `### ✅ Passed Tests\n\n`;
      suite.tests.filter(test => test.status === 'passed').forEach(test => {
        report += `- ${test.title}\n`;
      });
      report += `\n`;
    }

    if (suite.skipped > 0) {
      report += `### ⏭️ Skipped Tests\n\n`;
      suite.tests.filter(test => test.status === 'skipped').forEach(test => {
        report += `- ${test.title}\n`;
      });
      report += `\n`;
    }
  });

  // Add environment info
  report += `## Environment Information

- **Backend URL:** ${process.env.SMIS_API_URL || 'http://localhost:5000/api'}
- **Frontend URL:** ${process.env.SMIS_FRONTEND_URL || 'http://localhost:3000'}
- **Node Version:** ${process.version}
- **Test Environment:** ${process.env.NODE_ENV || 'test'}

## Test Configuration

- **Cleanup Test Data:** ${process.env.CLEANUP_TEST_DATA !== 'false' ? 'Enabled' : 'Disabled'}
- **Verbose Output:** ${process.env.VERBOSE_TESTS === 'true' ? 'Enabled' : 'Disabled'}
- **Retries:** ${process.env.TEST_RETRIES || '2'}

---

*Report generated by SMIS API Test Suite*
`;

  return report;
}

function getIconForSuite(suiteName) {
  if (suiteName.includes('Authentication')) return '🔐';
  if (suiteName.includes('Student')) return '👨‍🎓';
  if (suiteName.includes('Teacher')) return '👨‍🏫';
  if (suiteName.includes('Admin')) return '👨‍💼';
  if (suiteName.includes('HOD')) return '👨‍💼';
  if (suiteName.includes('Finance')) return '💰';
  if (suiteName.includes('Error')) return '🚨';
  return '📋';
}

// Run the report generator
if (require.main === module) {
  generateReport();
}

module.exports = { generateReport };
